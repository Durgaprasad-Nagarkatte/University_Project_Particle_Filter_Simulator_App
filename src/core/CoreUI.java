package core;

import java.math.BigDecimal;
import java.util.*;
import java.util.Map.Entry;

import at.mukprojects.console.Console;
import controlP5.Button;
import controlP5.CallbackEvent;
import controlP5.CallbackListener;
import controlP5.ControlP5;
import controlP5.Println;
import controlP5.Textarea;
import controlP5.Textfield;
import map.Landmark;
import processing.core.*;
import robot.Particle;
import robot.Robot;
import util.UtilMath;
import util.UtilParticle;

public class CoreUI extends PApplet {

	// Create default variables
	List<Landmark> landmarks = new ArrayList<>();
	final double WORLD_SIZE_WIDTH 	= 100.0;
	final double WORLD_SIZE_HEIGHT 	= 76.8;
	
	// User set variables
	double Sensor_Range = 25;
	int Number_Of_Particles = 1000;
	double Forward_Noise = 0.05;
	double Turn_Noise = 0.05;
	double Sensor_Noise = 5.0;
	int Frame_Delay = 100;
	
	Robot robot;
	Random rand = new Random();
	
	// Signal variables
	boolean IS_SIM_RUNNING = false;
	boolean SETTINGS_INITIALISED = true;
	boolean ADDING_LANDMARKS_MODE = false;

	// Collections to hold the particles and the readings generated by the robot
	NavigableMap<Integer, Double> sensorReadings;
	List<Particle> particlesList;

	// user interface variables
	int Yellow = color(255, 255, 0);
	int Red = color(255, 0, 0);
	int Green = color(0, 255, 0);
	int Blue = color(0, 0, 255);
	int White = color(255);
	int Black = color(0);
	
	int DefaultBlue = color(0, 45, 90);
	int ActiveGreen = color(0, 204, 102);
	int ErrorRed = color(255, 80, 80);
	
	int prevTime;

	public void settings() {
		
		// Set for laptop screen size
		size(1366, 768);
		smooth();
	}

	public void setup() {
		
		background(0);

		// create robot - give it information about the world
		robot = new Robot(this, WORLD_SIZE_WIDTH, WORLD_SIZE_HEIGHT, landmarks, Sensor_Range);

		particlesList = UtilParticle.genParticles(this, Number_Of_Particles, WORLD_SIZE_WIDTH, WORLD_SIZE_HEIGHT, landmarks, Sensor_Range, Forward_Noise, Turn_Noise, Sensor_Noise);
		
		setupUserInterface();
		setupListeners();
		
	}

	final float LOW_RAND_MOTION_DUR = 5;	// smallest motion duration possible
	final float HIGH_RAND_MOTION_DUR = 15;	// largest motion duration possible
	
	final float LOW_RAND_MOTION_FWD = 0.5f;	// smallest forward motion possible
	final float HIGH_RAND_MOTION_FWD = 1.5f;	// largest forward motion possible
	
	float noiseSeed = 0.01f;
	long motionDuration = 10;
	long simCount = 0;
	
	float diffAngle = 0;
	double turnAngle = 0;
	double forwardMotion = 1;
	
	public void draw() {
		
		if ((this.millis() - prevTime) > Frame_Delay) {
			
			// update the position of the robot and the particles
			if (true == IS_SIM_RUNNING) {
				
				// generate a random motion vector (turnAngle/forwardMotion) and perform it for
				// as many frames specified by motionDuration
			    if (0 == (simCount % motionDuration)) {
			    	
			    	// randomly decide the motion duration
			    	motionDuration = (int)(random(LOW_RAND_MOTION_DUR, HIGH_RAND_MOTION_DUR));
			    	
			    	// create a smooth random changing of turnAngle using random Gaussian
			    	turnAngle = rand.nextGaussian() * (PI / 40);
			    	
			    	// randomly decide the value for forward motion
			    	forwardMotion = random(LOW_RAND_MOTION_FWD, HIGH_RAND_MOTION_FWD);
			    	
			    	// reset the simCount
			    	simCount = 0;
			    }
				
				robot = robot.move(turnAngle, forwardMotion);
				particlesList = UtilParticle.moveParticles(particlesList, turnAngle, forwardMotion);
		
				sensorReadings = robot.sense();
				particlesList = UtilParticle.weighParticles(particlesList, sensorReadings);
				
				boolean doRandomSample = (0 == (simCount % 200000));
				particlesList = UtilParticle.resampleParticlesBigDecimal(particlesList, doRandomSample);
				
				simCount++;
			}
					
			// Draw the simulation
			background(240);
			
			prevTime = this.millis();
			
			// draw landmarks
			for (Landmark currLandmark : landmarks) {
				currLandmark.draw();
			}

			// draw particles
			for (Particle par : particlesList) {
				par.draw();
			}
			
			// draw robot
			robot.draw();
			
			// Draw area for control panel
			fill(153);
			rect(1000, 0, 366, height);
		}
		else {
			// Draw area for control panel
			fill(153);
			rect(1000, 0, 366, height);
		}
	}

	
	public void mousePressed() {
		
		// when in this mode we are adding landmarks
		if (true == ADDING_LANDMARKS_MODE) {
			
			final double xPosLandmark = mouseX / 10.0;
			final double yPosLandmark = mouseY / 10.0;
			
			// make sure selected position is in the drawn world (not near buttons)
			if (xPosLandmark <= WORLD_SIZE_WIDTH && yPosLandmark <= WORLD_SIZE_HEIGHT) {
				landmarks.add(new Landmark(this, xPosLandmark, yPosLandmark));
			}
		}
		
	}
	
	
	public void setupUserInterface() {
		
		cp5 = new ControlP5(this);
		ArialFont16 = createFont("arial", 16, true);
		ArialFont14 = createFont("arial", 14, true);
		
		final int spaceDssplayAndEnd = 366;
		final int standardFieldHeight = 32;
		final int standardFieldWidth = (spaceDssplayAndEnd / 3) * 2;
		final int standardLabelTextSize = 12;
		final int standardHeightDivisor = 24;
		final int standardXPos = 1000 + (spaceDssplayAndEnd / 6);
		
		/* set up the console ------------------------------------------------ */
		consoleWidth = 366;
		consoleY = (height / standardHeightDivisor) * 18;
		consoleHeight = height;
		consoleX = 1000;
		
		consoleTextArea = cp5.addTextarea("txt")
			                 .setPosition(consoleX, consoleY)
			                 .setSize(consoleWidth, consoleHeight)
			                 .setFont(createFont("", 10))
			                 .setLineHeight(14)
			                 .setColor(color(200))
			                 .setColorBackground(color(0, 100))
			                 .setColorForeground(color(255, 100));
		
		console = cp5.addConsole(consoleTextArea);//
		 
		
		/* add landmarks button ---------------------------------------------- */
		final int landmarksButtonY = (height / standardHeightDivisor) * 1;
		landmarksButton = cp5.addButton("landmarksButton")
							 .setPosition(standardXPos, landmarksButtonY)
							 .setSize(standardFieldWidth, standardFieldHeight)
							 .setCaptionLabel("Add Landmarks");
		
		landmarksButton.getCaptionLabel()
		  		 	   .setSize(standardLabelTextSize);
		
		landmarksButton.setColorBackground(DefaultBlue);
		
		/* number of particles text field ------------------------------------ */
		final int numParticlesY = (height / standardHeightDivisor) * 3;
		numParticles = cp5.addTextfield("numParticles")
				   .setPosition(standardXPos, numParticlesY)
				   .setSize(standardFieldWidth, standardFieldHeight)
				   .setFont(ArialFont16)
				   .setCaptionLabel("Number of particles")
				   .setColorCaptionLabel(0)
				   .setColor(this.color(255, 255, 255));
		
		numParticles.getCaptionLabel()
		  			.setSize(standardLabelTextSize);
		
		numParticles.setText("1000");
		
		/* sensor range text field ------------------------------------------- */
		final int sensorRangeY = (height / standardHeightDivisor) * 5;
		sensorRange = cp5.addTextfield("sensorRange")
				   .setPosition(standardXPos, sensorRangeY)
				   .setSize(standardFieldWidth, standardFieldHeight)
				   .setFont(ArialFont16)
				   .setCaptionLabel("Sensor range")
				   .setColorCaptionLabel(0)
				   .setColor(this.color(255, 255, 255));
		
		sensorRange.getCaptionLabel()
			 	   .setSize(standardLabelTextSize);
		
		sensorRange.setText("25");
		
		/* turning noise text field ------------------------------------------ */
		final int turnNoiseY = (height / standardHeightDivisor) * 7;
		turnNoise = cp5.addTextfield("turnNoise")
				   .setPosition(standardXPos, turnNoiseY)
				   .setSize(standardFieldWidth, standardFieldHeight)
				   .setFont(ArialFont16)
				   .setCaptionLabel("Turn noise")
				   .setColorCaptionLabel(0)
				   .setColor(this.color(255, 255, 255));
		
		turnNoise.getCaptionLabel()
			 	 .setSize(standardLabelTextSize);
		
		turnNoise.setText("0.05");
		
		/* sensor noise text field ------------------------------------------- */
		final int sensorNoiseY = (height / standardHeightDivisor) * 9;
		sensorNoise = cp5.addTextfield("sensorNoise")
				   .setPosition(standardXPos, sensorNoiseY)
				   .setSize(standardFieldWidth, standardFieldHeight)
				   .setFont(ArialFont16)
				   .setCaptionLabel("Sensor noise")
				   .setColorCaptionLabel(0)
				   .setColor(this.color(255, 255, 255));
		
		sensorNoise.getCaptionLabel()
			 	   .setSize(standardLabelTextSize);
		
		sensorNoise.setText("5.0");
		
		/* forward noise text field ------------------------------------------ */
		final int forwardNoiseY = (height / standardHeightDivisor) * 11;
		forwardNoise = cp5.addTextfield("forwardNoise")
				   .setPosition(standardXPos, forwardNoiseY)
				   .setSize(standardFieldWidth, standardFieldHeight)
				   .setFont(ArialFont16)
				   .setCaptionLabel("Forward noise")
				   .setColorCaptionLabel(0)
				   .setColor(this.color(255, 255, 255));
		
		forwardNoise.getCaptionLabel()
			 		.setSize(standardLabelTextSize);
		
		forwardNoise.setText("0.05");
		
		/* frame delay text field -------------------------------------------- */
		final int frameDelayY = (height / standardHeightDivisor) * 13;
		frameDelay = cp5.addTextfield("frameDelay")
				   .setPosition(standardXPos, frameDelayY)
				   .setSize(standardFieldWidth, standardFieldHeight)
				   .setFont(ArialFont16)
				   .setCaptionLabel("Frame delay - milliseconds")
				   .setColorCaptionLabel(0)
				   .setColor(this.color(255, 255, 255));
		
		frameDelay.getCaptionLabel()
			 	  .setSize(standardLabelTextSize);
		
		frameDelay.setText("100");
		
		/* set button -------------------------------------------------------- */
		final int setButtonY = (height / standardHeightDivisor) * 15;
		setButton = cp5.addButton("setButton")
							 .setPosition(standardXPos, setButtonY)
							 .setSize(standardFieldWidth, standardFieldHeight)
							 .setCaptionLabel("Apply Settings");
		
		setButton.getCaptionLabel()
		  		 	   .setSize(standardLabelTextSize);
		
		/* run button -------------------------------------------------------- */
		final int runButtonY = (height / standardHeightDivisor) * 16 + 10;
		final int runButtonWidth = (standardFieldWidth / 2) - 10;
		runButton = cp5.addButton("runButton")
							 .setPosition(standardXPos, runButtonY)
							 .setSize(runButtonWidth, standardFieldHeight)
							 .setCaptionLabel("Run");
		
		runButton.getCaptionLabel()
		  		 	   .setSize(standardLabelTextSize);
		
		/* pause button ------------------------------------------------------ */
		final int pauseButtonY = (height / standardHeightDivisor) * 16 + 10;
		final int pauseButtonX = (standardXPos + runButtonWidth) + 20;
		final int pauseButtonWidth = (standardFieldWidth / 2) - 10;
		pauseButton = cp5.addButton("pauseButton")
							 .setPosition(pauseButtonX, pauseButtonY)
							 .setSize(pauseButtonWidth, standardFieldHeight)
							 .setCaptionLabel("Pause");
		
		pauseButton.getCaptionLabel()
		  		 	   .setSize(standardLabelTextSize);
	}
	
	public void setupListeners () {
		
		/* add landmarks button functionality -------------------------------- */
		landmarksButton.onClick(new CallbackListener() {

			@Override
			public void controlEvent(CallbackEvent arg0) {
				
				if (false == ADDING_LANDMARKS_MODE) {
					// switch to adding landmarks mode
					ADDING_LANDMARKS_MODE = true;
					//IS_SIM_RUNNING = false;
					landmarksButton.setColorBackground(ActiveGreen);
				}
				else {
					// go back to normal mouse operation
					ADDING_LANDMARKS_MODE = false;
					landmarksButton.setColorBackground(DefaultBlue);
					System.out.println("Landmarks Added");
				}
				
			}
			
		});
		
		/* set button functionality ------------------------------------------ */
		setButton.onClick(new CallbackListener () {

			@Override
			public void controlEvent(CallbackEvent ev) {
				
				// check particle count
				SETTINGS_INITIALISED = false;
				String text;
				int intValue;
				float floatValue;
				
				/* get, verify and set number of particles ------------------- */
				text = numParticles.getText();
				
				if (!text.isEmpty()) {
					try {
						intValue = Integer.parseInt(text);
						if (intValue > 0) {
							Number_Of_Particles = intValue;
						}
						else {
							System.out.println("Particle count must be greater than 0");
							setButton.setColorBackground(ErrorRed);
							return;
						}
					}
					catch (NumberFormatException  e) {
						System.out.println("Valid integer was not provided for number of particles");
						setButton.setColorBackground(ErrorRed);
						return;
					}
				}
				else {
					System.out.println("No number of particles provided");
					setButton.setColorBackground(ErrorRed);
					return;
				}
				
				/* get, verify and set sensor range -------------------------- */
				text = sensorRange.getText();
				
				if (!text.isEmpty()) {
					try {
						floatValue = Float.parseFloat(text);
						if (floatValue > 0) {
							Sensor_Range = floatValue;
						}
						else {
							System.out.println("Sensor range must be greater than 0");
							setButton.setColorBackground(ErrorRed);
							return;
						}
					}
					catch (NumberFormatException  e) {
						System.out.println("Valid float was not provided for sensor range");
						setButton.setColorBackground(ErrorRed);
						return;
					}
				}
				else {
					System.out.println("No sensor range provided");
					setButton.setColorBackground(ErrorRed);
					return;
				}
				
				/* get, verify and set turn noise ---------------------------- */
				text = turnNoise.getText();
				
				if (!text.isEmpty()) {
					try {
						floatValue = Float.parseFloat(text);
						if (floatValue >= 0) {
							Turn_Noise = floatValue;
						}
						else {
							System.out.println("Turn noise must be greater than or equal to 0");
							setButton.setColorBackground(ErrorRed);
							return;
						}
					}
					catch (NumberFormatException  e) {
						System.out.println("Valid float was not provided for turn noise");
						setButton.setColorBackground(ErrorRed);
						return;
					}
				}
				else {
					System.out.println("No turn noise provided");
					setButton.setColorBackground(ErrorRed);
					return;
				}
				
				/* get, verify and set sensor noise -------------------------- */
				text = sensorNoise.getText();
				
				if (!text.isEmpty()) {
					try {
						floatValue = Float.parseFloat(text);
						if (floatValue >= 0) {
							Sensor_Noise = floatValue;
						}
						else {
							System.out.println("Sensor noise must be greater than or equal to 0");
							setButton.setColorBackground(ErrorRed);
							return;
						}
					}
					catch (NumberFormatException  e) {
						System.out.println("Valid float was not provided for sensor noise");
						setButton.setColorBackground(ErrorRed);
						return;
					}
				}
				else {
					System.out.println("No sensor noise provided");
					setButton.setColorBackground(ErrorRed);
					return;
				}
				
				/* get, verify and set forward noise ------------------------- */
				text = forwardNoise.getText();
				
				if (!text.isEmpty()) {
					try {
						floatValue = Float.parseFloat(text);
						if (floatValue >= 0) {
							Forward_Noise = floatValue;
						}
						else {
							System.out.println("Forward noise must be greater than or equal to 0");
							setButton.setColorBackground(ErrorRed);
							return;
						}
					}
					catch (NumberFormatException  e) {
						System.out.println("Valid float was not provided for forward noise");
						setButton.setColorBackground(ErrorRed);
						return;
					}
				}
				else {
					System.out.println("No forward noise provided");
					setButton.setColorBackground(ErrorRed);
					return;
				}
				
				/* get, verify and set frame delay --------------------------- */
				text = frameDelay.getText();
				
				if (!text.isEmpty()) {
					try {
						intValue = Integer.parseInt(text);
						if (intValue >= 0) {
							Frame_Delay = intValue;
						}
						else {
							System.out.println("Frame delay must be greater than or equal to 0");
							setButton.setColorBackground(ErrorRed);
							return;
						}
					}
					catch (NumberFormatException  e) {
						System.out.println("Valid float was not provided for frame delay");
						setButton.setColorBackground(ErrorRed);
						return;
					}
				}
				else {
					System.out.println("No frame delay provided");
					setButton.setColorBackground(ErrorRed);
					return;
				}
				
				/* Use the settings gathered to initialise the program ------- */
				robot = new Robot(robot.getParent(), WORLD_SIZE_WIDTH, WORLD_SIZE_HEIGHT, landmarks, Sensor_Range);
				robot.setNoise(Forward_Noise, Turn_Noise, Sensor_Noise);
				particlesList = UtilParticle.genParticles(robot.getParent(), Number_Of_Particles, WORLD_SIZE_WIDTH, 
														  WORLD_SIZE_HEIGHT, landmarks, Sensor_Range, Forward_Noise, 
														  Turn_Noise, Sensor_Noise);
				
				SETTINGS_INITIALISED= true;
				setButton.setColorBackground(ActiveGreen);
				System.out.println("Settings Applied");
			}
			
		});
		
		/* run button functionality ------------------------------------------ */
		runButton.onClick(new CallbackListener () {
			
			@Override
			public void controlEvent(CallbackEvent ev) {
				
				if (false == SETTINGS_INITIALISED) {
					runButton.setColorBackground(ErrorRed);
					System.out.println("No settings given");
					return;
				}
				
				/* set variable indicating that everything has been setup ---- */
				IS_SIM_RUNNING = true;
				
				runButton.setColorBackground(ActiveGreen);
				System.out.println("Settings Applied");
			}
		});
		
		/* pause button functionality ---------------------------------------- */
		pauseButton.onClick(new CallbackListener () {
			
			@Override
			public void controlEvent(CallbackEvent ev) {
				
				if (true == IS_SIM_RUNNING) {
					IS_SIM_RUNNING = false;
					return;
				}
				
				runButton.setColorBackground(DefaultBlue);
				System.out.println("Simulation paused");
			}
		});
	}
	
	Println console;
	Textarea consoleTextArea;
	int consoleWidth;
	int consoleHeight;
	int consoleX;
	int consoleY;
	
	ControlP5 cp5;
	PFont ArialFont16;
	PFont ArialFont14;
	
	Textfield numParticles;
	Textfield sensorRange;
	Textfield turnNoise;
	Textfield sensorNoise;
	Textfield forwardNoise;
	Textfield frameDelay;
	
	Button landmarksButton;
	Button setButton;
	Button pauseButton;
	Button runButton;
	
	
	
	
	
	
	
	
	
	
	
	

	/**
	 * Convert degrees to radians, (short hand wrapper method)
	 * 
	 * @param degrees
	 *            degrees value to convert
	 * @return converted value in radians
	 */
	public double d2r(double degrees) {
		return Math.toRadians(degrees);
	}

}
